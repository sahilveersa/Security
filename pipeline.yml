# azure-pipelines.yml
trigger:
- none

parameters:
- name: environment
  displayName: Environment to scan
  type: string
  default: 'dev'
  values:
  - 'dev'
  - 'qa'
  - 'prod'

- name: scanType
  displayName: Type of ZAP scan
  type: string
  default: 'baseline'
  values:
  - 'baseline'
  - 'full'
  - 'api'

- name: reportTemplate
  displayName: ZAP Report Template
  type: string
  default: 'modern'
  values:
  - 'modern'
  - 'traditional-html'
  - 'traditional-html-plus'
  - 'traditional-json'
  - 'sarif-json'
  - 'pdf' 

variables:
  devUrl: 'http://testphp.vulnweb.com'
  qaUrl: 'https://qa-agent.app-np.neovance.com/'
  prodUrl: 'http://my-prod-app.com'

stages:
- stage: ZAP_Scan_Stage
  displayName: 'Run ZAP Scan'
  jobs:
  - job: ZAP_Scan_Job
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - script: |
        echo "Starting ZAP Scan..."
        echo "Environment: ${{ parameters.environment }}"
        echo "Scan Type: ${{ parameters.scanType }}"
        echo "Report Template: ${{ parameters.reportTemplate }}"
        
        # Pick target URL
        if [ "${{ parameters.environment }}" == "dev" ]; then
          TARGET_URL="${{ variables.devUrl }}"
        elif [ "${{ parameters.environment }}" == "qa" ]; then
          TARGET_URL="${{ variables.qaUrl }}"
        elif [ "${{ parameters.environment }}" == "prod" ]; then
          TARGET_URL="${{ variables.prodUrl }}"
        else
          echo "Invalid environment"; exit 1
        fi
        
        # Decide report extension
        case "${{ parameters.reportTemplate }}" in
          modern|traditional-html|traditional-html-plus)
            EXT="html";;
          traditional-json|sarif-json)
            EXT="json";;
          pdf)
            EXT="pdf";;
          *) EXT="html";;
        esac
        
        REPORT_FILENAME="zap_${{ parameters.scanType }}_report.${EXT}"
        
        # Work dir inside pipeline
        mkdir -p $(Build.ArtifactStagingDirectory)
        cd $(Build.ArtifactStagingDirectory)
        
        # Create a minimal zap.yaml in the working directory
        echo "# ZAP Configuration" > zap.yaml
        chmod 666 zap.yaml
        
        # Base docker command without user mapping to avoid permission issues
        ZAP_CMD="docker run --rm -v $(pwd):/zap/wrk:rw ghcr.io/zaproxy/zaproxy:stable"
        
        # Choose scan type
        if [ "${{ parameters.scanType }}" == "baseline" ]; then
          ZAP_CMD+=" zap-baseline.py"
        elif [ "${{ parameters.scanType }}" == "full" ]; then
          ZAP_CMD+=" zap-full-scan.py"
        elif [ "${{ parameters.scanType }}" == "api" ]; then
          ZAP_CMD+=" zap-api-scan.py -f openapi -t $TARGET_URL/api-docs"
        fi
        
        ZAP_CMD+=" -t $TARGET_URL"
        # Don't use -w flag, let ZAP use its default config location
        
        # Handle report type
        if [ "${{ parameters.reportTemplate }}" == "pdf" ]; then
          ZAP_CMD+=" -z \"-addoninstall report\""
          ZAP_CMD+=" -z \"-reportformat pdf\""
          ZAP_CMD+=" -z \"-reportfile /zap/wrk/$REPORT_FILENAME\""
        else
          ZAP_CMD+=" -r $REPORT_FILENAME"
          if [ "${{ parameters.reportTemplate }}" != "modern" ]; then
            ZAP_CMD+=" -z \"-config report.template=${{ parameters.reportTemplate }}\""
          fi
        fi
        
        echo "Executing: $ZAP_CMD"
        eval $ZAP_CMD
        
      displayName: 'Run ZAP Scan with Docker'
