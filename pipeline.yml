# azure-pipelines.yml
trigger:
- none
parameters:
- name: environment
  displayName: Environment to scan
  type: string
  default: 'dev'
  values:
  - 'dev'
  - 'qa'
  - 'prod'
- name: scanType
  displayName: Type of ZAP scan
  type: string
  default: 'baseline'
  values:
  - 'baseline'
  - 'full'
  - 'api'
- name: reportTemplate
  displayName: ZAP Report Template
  type: string
  default: 'modern'
  values:
  - 'modern'
  - 'traditional-html'
  - 'traditional-html-plus'
  - 'traditional-json'
  - 'sarif-json'
  - 'pdf' 
variables:
  devUrl: 'http://testphp.vulnweb.com'
  qaUrl: 'https://qa-agent.app-np.neovance.com/'
  prodUrl: 'http://my-prod-app.com'
stages:
- stage: ZAP_Scan_Stage
  displayName: 'Run ZAP Scan'
  jobs:
  - job: ZAP_Scan_Job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "Starting ZAP Scan..."
        echo "Environment: ${{ parameters.environment }}"
        echo "Scan Type: ${{ parameters.scanType }}"
        echo "Report Template: ${{ parameters.reportTemplate }}"
        
        # Pick target URL
        if [ "${{ parameters.environment }}" == "dev" ]; then
          TARGET_URL="${{ variables.devUrl }}"
        elif [ "${{ parameters.environment }}" == "qa" ]; then
          TARGET_URL="${{ variables.qaUrl }}"
        elif [ "${{ parameters.environment }}" == "prod" ]; then
          TARGET_URL="${{ variables.prodUrl }}"
        else
          echo "Invalid environment"; exit 1
        fi
        
        # Decide report extension
        case "${{ parameters.reportTemplate }}" in
          modern|traditional-html|traditional-html-plus)
            EXT="html";;
          traditional-json|sarif-json)
            EXT="json";;
          pdf)
            EXT="pdf";;
          *) EXT="html";;
        esac
        
        REPORT_FILENAME="zap_${{ parameters.scanType }}_report.${EXT}"
        
        # Work dir inside pipeline
        mkdir -p $(Build.ArtifactStagingDirectory)
        cd $(Build.ArtifactStagingDirectory)
        
        # Make sure we have proper permissions
        sudo chown -R $(id -u):$(id -g) $(pwd)
        chmod 755 $(pwd)
        
        echo "Current directory: $(pwd)"
        echo "Directory permissions:"
        ls -la $(pwd)
        
        # Base docker command - run as root and fix permissions after
        ZAP_CMD="docker run --rm -v $(pwd):/zap/wrk:rw --workdir /zap/wrk"
        
        # Add environment variables for better control
        ZAP_CMD+=" -e ZAP_PORT=8090"
        ZAP_CMD+=" ghcr.io/zaproxy/zaproxy:stable"
        
        # Choose scan type and build command
        if [ "${{ parameters.scanType }}" == "baseline" ]; then
          ZAP_CMD+=" zap-baseline.py -t $TARGET_URL -r $REPORT_FILENAME -d"
        elif [ "${{ parameters.scanType }}" == "full" ]; then
          ZAP_CMD+=" zap-full-scan.py -t $TARGET_URL -r $REPORT_FILENAME -d"
        elif [ "${{ parameters.scanType }}" == "api" ]; then
          ZAP_CMD+=" zap-api-scan.py -f openapi -t $TARGET_URL/api-docs -r $REPORT_FILENAME -d"
        fi
        
        # Add report template configuration (if not modern/default)
        if [ "${{ parameters.reportTemplate }}" == "pdf" ]; then
          ZAP_CMD+=" -z \"-addoninstall report\""
          ZAP_CMD+=" -z \"-reportformat pdf\""
          ZAP_CMD+=" -z \"-reportfile /zap/wrk/$REPORT_FILENAME\""
        elif [ "${{ parameters.reportTemplate }}" != "modern" ]; then
          ZAP_CMD+=" -z \"-config report.template=${{ parameters.reportTemplate }}\""
        fi
        
        echo "Executing: $ZAP_CMD"
        eval $ZAP_CMD
        
        # Fix permissions on generated files
        echo "Fixing permissions on generated files..."
        sudo chown -R $(id -u):$(id -g) $(pwd)
        
        # Verify report was created
        echo "Files after scan:"
        ls -la
        
        if [ -f "$REPORT_FILENAME" ]; then
          echo "✅ ZAP scan completed successfully. Report: $REPORT_FILENAME"
          echo "Report size: $(du -h $REPORT_FILENAME)"
        else
          echo "❌ ZAP scan failed or report not generated"
          echo "Available files:"
          find . -name "*.html" -o -name "*.json" -o -name "*.pdf"
          exit 1
        fi
        
      displayName: 'Run ZAP Scan with Docker'
      
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: 'ZAP_Reports_${{ parameters.environment }}'
      displayName: 'Publish ZAP Scan Report'
      condition: always()