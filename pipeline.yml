# azure-pipelines.yml
trigger:
- none
parameters:
- name: environment
  displayName: Environment to scan
  type: string
  default: 'dev'
  values:
  - 'dev'
  - 'qa'
  - 'prod'
- name: scanType
  displayName: Type of ZAP scan
  type: string
  default: 'baseline'
  values:
  - 'baseline'
  - 'full'
  - 'api'
- name: reportTemplate
  displayName: ZAP Report Template
  type: string
  default: 'modern'
  values:
  - 'modern'
  - 'traditional-html'
  - 'traditional-html-plus'
  - 'traditional-json'
  - 'sarif-json'
  - 'pdf' 
variables:
  devUrl: 'http://testphp.vulnweb.com'
  qaUrl: 'https://qa-agent.app-np.neovance.com/'
  prodUrl: 'http://my-prod-app.com'
stages:
- stage: ZAP_Scan_Stage
  displayName: 'Run ZAP Scan'
  jobs:
  - job: ZAP_Scan_Job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        echo "Starting ZAP Scan..."
        echo "Environment: ${{ parameters.environment }}"
        echo "Scan Type: ${{ parameters.scanType }}"
        
        # Pick target URL
        if [ "${{ parameters.environment }}" == "dev" ]; then
          TARGET_URL="${{ variables.devUrl }}"
        elif [ "${{ parameters.environment }}" == "qa" ]; then
          TARGET_URL="${{ variables.qaUrl }}"
        elif [ "${{ parameters.environment }}" == "prod" ]; then
          TARGET_URL="${{ variables.prodUrl }}"
        else
          echo "Invalid environment"; exit 1
        fi
        
        echo "Target URL: $TARGET_URL"
        cd $(Build.ArtifactStagingDirectory)
        
        # Create a temporary container and copy files out afterward
        echo "Creating and running ZAP container..."
        
        CONTAINER_NAME="zap-scan-$(date +%s)"
        
        if [ "${{ parameters.scanType }}" == "baseline" ]; then
          docker run --name $CONTAINER_NAME \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t $TARGET_URL \
            -r /zap/wrk/report.html \
            -x /zap/wrk/report.xml \
            -J /zap/wrk/report.json \
            -d || echo "ZAP scan completed with findings"
            
        elif [ "${{ parameters.scanType }}" == "full" ]; then
          docker run --name $CONTAINER_NAME \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
            -t $TARGET_URL \
            -r /zap/wrk/report.html \
            -x /zap/wrk/report.xml \
            -J /zap/wrk/report.json \
            -d || echo "ZAP scan completed with findings"
            
        elif [ "${{ parameters.scanType }}" == "api" ]; then
          docker run --name $CONTAINER_NAME \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-api-scan.py \
            -t $TARGET_URL \
            -f openapi \
            -r /zap/wrk/report.html \
            -x /zap/wrk/report.xml \
            -J /zap/wrk/report.json \
            -d || echo "ZAP scan completed with findings"
        fi
        
        echo "Extracting reports from container..."
        
        # Copy files out of the container
        docker cp $CONTAINER_NAME:/zap/wrk/report.html ./zap_${{ parameters.scanType }}_report.html 2>/dev/null || echo "HTML report not found"
        docker cp $CONTAINER_NAME:/zap/wrk/report.xml ./zap_${{ parameters.scanType }}_report.xml 2>/dev/null || echo "XML report not found"
        docker cp $CONTAINER_NAME:/zap/wrk/report.json ./zap_${{ parameters.scanType }}_report.json 2>/dev/null || echo "JSON report not found"
        
        # Clean up container
        docker rm $CONTAINER_NAME 2>/dev/null || true
        
        # Check what we got
        echo "Generated files:"
        ls -la *.html *.xml *.json 2>/dev/null || echo "No report files found"
        
        # Verify at least one report exists
        if ls zap_*_report.* 1> /dev/null 2>&1; then
          echo "✅ ZAP scan reports generated successfully!"
          for file in zap_*_report.*; do
            if [ -f "$file" ]; then
              echo "📄 $file ($(du -h "$file" | cut -f1))"
            fi
          done
        else
          echo "❌ No reports were generated"
          echo "Container logs:"
          docker logs $CONTAINER_NAME 2>/dev/null || echo "No logs available"
          exit 1
        fi
        
      displayName: 'Run ZAP Scan and Extract Reports'