# azure-pipelines.yml
trigger:
- none

parameters:
- name: adminUrl
  displayName: "Admin URL"
  type: string
  default: "http://my-admin-app.com"

- name: agentUrl
  displayName: "Agent URL"
  type: string
  default: "http://my-agent-app.com"

- name: scanType
  displayName: "Type of ZAP scan"
  type: string
  default: "baseline"
  values:
  - 'baseline'
  - 'full'
  - 'api'

- name: reportTemplate
  displayName: "ZAP Report Template"
  type: string
  default: "modern"
  values:
  - 'modern'
  - 'traditional-html'
  - 'traditional-html-plus'
  - 'pdf'

stages:
- stage: ZAP_Scan_Stage
  displayName: "Run ZAP Scans"
  jobs:

  - job: ZAP_Admin
    displayName: "Run ZAP Scan on Admin"
    pool:
      vmImage: "ubuntu-latest"
    steps:
    - script: |
        echo "Starting ZAP Admin Scan..."
        mkdir -p $(Build.ArtifactStagingDirectory)/admin-reports
        chmod 777 $(Build.ArtifactStagingDirectory)/admin-reports

        TARGET_URL="${{ parameters.adminUrl }}"
        REPORT_HTML="zap_admin_${{ parameters.scanType }}_report.html"
        REPORT_JSON="zap_admin_${{ parameters.scanType }}_report.json"
        REPORT_PDF="zap_admin_${{ parameters.scanType }}_report.pdf"

        if [ "${{ parameters.scanType }}" == "baseline" ]; then
          SCAN_CMD="zap-baseline.py -t $TARGET_URL -r $REPORT_HTML -J $REPORT_JSON"
        elif [ "${{ parameters.scanType }}" == "full" ]; then
          SCAN_CMD="zap-full-scan.py -t $TARGET_URL -r $REPORT_HTML -J $REPORT_JSON"
        else
          SCAN_CMD="zap-api-scan.py -t $TARGET_URL -f openapi -r $REPORT_HTML -J $REPORT_JSON"
        fi

        docker run --rm \
          -v $(Build.ArtifactStagingDirectory)/admin-reports:/zap/wrk:rw \
          ghcr.io/zaproxy/zaproxy:stable \
          $SCAN_CMD

        # Generate PDF separately
        docker run --rm \
          -v $(Build.ArtifactStagingDirectory)/admin-reports:/zap/wrk:rw \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-cli --zap-url http://localhost --zap-port 8080 \
          -p report.generate /zap/wrk/$REPORT_PDF -f pdf
      displayName: "Run ZAP Admin Scan"

    - publish: "$(Build.ArtifactStagingDirectory)/admin-reports"
      artifact: "ZAP_Reports_admin"
      displayName: "Publish ZAP Admin Reports"
      condition: always()

  - job: ZAP_Agent
    displayName: "Run ZAP Scan on Agent"
    pool:
      vmImage: "ubuntu-latest"
    steps:
    - script: |
        echo "Starting ZAP Agent Scan..."
        mkdir -p $(Build.ArtifactStagingDirectory)/agent-reports
        chmod 777 $(Build.ArtifactStagingDirectory)/agent-reports

        TARGET_URL="${{ parameters.agentUrl }}"
        REPORT_HTML="zap_agent_${{ parameters.scanType }}_report.html"
        REPORT_JSON="zap_agent_${{ parameters.scanType }}_report.json"
        REPORT_PDF="zap_agent_${{ parameters.scanType }}_report.pdf"

        if [ "${{ parameters.scanType }}" == "baseline" ]; then
          SCAN_CMD="zap-baseline.py -t $TARGET_URL -r $REPORT_HTML -J $REPORT_JSON"
        elif [ "${{ parameters.scanType }}" == "full" ]; then
          SCAN_CMD="zap-full-scan.py -t $TARGET_URL -r $REPORT_HTML -J $REPORT_JSON"
        else
          SCAN_CMD="zap-api-scan.py -t $TARGET_URL -f openapi -r $REPORT_HTML -J $REPORT_JSON"
        fi

        docker run --rm \
          -v $(Build.ArtifactStagingDirectory)/agent-reports:/zap/wrk:rw \
          ghcr.io/zaproxy/zaproxy:stable \
          $SCAN_CMD

        # Generate PDF separately
        docker run --rm \
          -v $(Build.ArtifactStagingDirectory)/agent-reports:/zap/wrk:rw \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-cli --zap-url http://localhost --zap-port 8080 \
          -p report.generate /zap/wrk/$REPORT_PDF -f pdf
      displayName: "Run ZAP Agent Scan"

    - publish: "$(Build.ArtifactStagingDirectory)/agent-reports"
      artifact: "ZAP_Reports_agent"
      displayName: "Publish ZAP Agent Reports"
      condition: always()
