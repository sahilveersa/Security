# zap-template.yml
parameters:
  - name: targetUrl
    type: string
  - name: appName
    type: string
  - name: scanType
    type: string
  - name: reportTemplate
    type: string

steps:
- script: |
    echo "Starting ZAP Scan for ${{ parameters.appName }}..."
    echo "Target URL: ${{ parameters.targetUrl }}"
    echo "Scan Type: ${{ parameters.scanType }}"
    echo "Report Template: ${{ parameters.reportTemplate }}"

    # Create a directory for the reports and the automation file
    ARTIFACT_DIR="$(Build.ArtifactStagingDirectory)/zap-reports"
    mkdir -p $ARTIFACT_DIR
    cd $ARTIFACT_DIR
    
    AUTOMATION_FILE="automation.yaml"

    # ========================================================================
    # Dynamically create the ZAP Automation Framework configuration file
    # ========================================================================
    
    # --- Common Environment Section ---
    cat <<EOF > $AUTOMATION_FILE
    env:
      contexts:
        - name: '${{ parameters.appName }}'
          urls:
            - '${{ parameters.targetUrl }}'
      parameters:
        failOnError: true
        failOnWarning: false
        progressToStdout: true
    jobs:
    EOF

    # --- Scan-Type Specific Jobs ---
    if [ "${{ parameters.scanType }}" == "baseline" ]; then
      cat <<EOF >> $AUTOMATION_FILE
      - type: passiveScan-config
        parameters:
          maxAlertsPerRule: 10
      - type: spider
        parameters:
          url: '${{ parameters.targetUrl }}'
          maxDuration: 5
          # FIXED: 'failIfFoundUrlsLessThan' is a boolean, the count is a separate param
          failIfFoundUrlsLessThan: true
          foundUrlsLessThan: 5
      - type: passiveScan-wait
    EOF
    elif [ "${{ parameters.scanType }}" == "full" ]; then
      cat <<EOF >> $AUTOMATION_FILE
      - type: spider
        parameters:
          url: '${{ parameters.targetUrl }}'
      - type: ajaxSpider
        parameters:
          url: '${{ parameters.targetUrl }}'
          maxDuration: 5
      - type: passiveScan-wait
      - type: activeScan
        parameters:
          context: '${{ parameters.appName }}'
    EOF
    elif [ "${{ parameters.scanType }}" == "api" ]; then
      cat <<EOF >> $AUTOMATION_FILE
      - type: openapi
        parameters:
          apiFile: '${{ parameters.targetUrl }}' # Can be a URL or a file path
      - type: passiveScan-wait
      - type: activeScan
        parameters:
          context: '${{ parameters.appName }}'
    EOF
    fi

    # --- Common Reporting Job ---
    # This job is added to all scan types
    # --- Always generate a traditional-json report ---
    cat <<EOF >> $AUTOMATION_FILE
      - type: report
        parameters:
        template: 'traditional-json'
        reportDir: '/zap/wrk/'
        reportFile: 'zap_report_${{ parameters.appName }}_${{ parameters.scanType }}_traditional-json'
        displayReport: false
    EOF

    # --- Conditionally generate a second report based on the user's selection ---
    if [ "${{ parameters.reportTemplate }}" != "traditional-json" ]; then
     cat <<EOF >> $AUTOMATION_FILE
    - type: report
      parameters:
        template: '${{ parameters.reportTemplate }}'
        reportDir: '/zap/wrk/'
        reportFile: 'zap_report_${{ parameters.appName }}_${{ parameters.scanType }}_${{ parameters.reportTemplate }}'
        displayReport: false
       EOF
    fi
    echo "Generated Automation Plan:"
    cat $AUTOMATION_FILE

    # ========================================================================
    # Run the ZAP Docker container with the automation framework
    # ========================================================================
    docker run --rm \
      -v $(pwd):/zap/wrk/:rw \
      --user root \
      ghcr.io/zaproxy/zaproxy:stable \
      zap.sh -cmd -addoninstall report-generation -autorun /zap/wrk/$AUTOMATION_FILE
      
    echo "ZAP scan finished."
    echo "Reports generated in $(pwd):"
    ls -la

  displayName: "Run ZAP Scan with Automation Framework"

- publish: '$(Build.ArtifactStagingDirectory)/zap-reports'
  artifact: 'ZAP_Reports_${{ parameters.appName }}'
  displayName: 'Publish ZAP Scan Reports'